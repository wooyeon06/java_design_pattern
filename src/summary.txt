

1. 유용한패턴

- 추상팩토리메소드 (abstractfactorymethod) - 객체를 만들때 init이 많다면 손쉽게 만들어주는 팩토리(객체를 찍어내는 공장)를 사용
- 어댑터 (adpter) - 레거시시스템에서 새로운 시스템에 적용할때
- 빌더 (builder) - dto, vo객체 만들기 수월
- 데코레이터 (decorator) - 기존객체에 데크레이터를 추가해 추가기능 개발에 용이
- 옵저버 (observer) - 다수의 객체(옵저버)에 관측되는 객체의 변화를 캐치할때 사용
- 프로토타입 (prototype) - 객체 복사에 유리
- 프록시 (proxy) - lazy로딩, 객체의 비용이 클 경우 대리자로서 생성
- 프로바이더 컨슈머 (provider consumer) - 프로바이더에서 적재하고 나중에 컨슈머가 처리
- 스테이트 (state) - 객체의 상태를 context에 저장해 두어 상태관리에 용이
- 템플릿메소드 (templatemethod) - 기본적으로 구현해야할 템플릿을 제공할때
